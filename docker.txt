#docker

########################################
# dockerイメージを取得（ダウンロード）する
########################################

$ docker pull <イメージ名:タグ名>

※タグ名は省略可能。省略した場合はlatestになる。

例：
$ docker pull centos:7

########################################
# イメージを表示する（2つ目は省略形）
########################################
$ docker image ls
$ docker images

### オプション
-all, -a 全てのイメージを表示
--digests ダイジェストを表示するかどうか
--no-trunk 結果を全て表示する
--quiet, -q

########################################
# イメージを削除する（2つ目は省略形）
########################################
$ docker rmi <IMAGE ID>
$ docker image rm [オプション] >イメージ名> [イメージ名]

### オプション
--force イメージの強制削除
--no-prun 中間イメージを作成しない


########################################
# dockerを実行する
########################################
$ docker container run [オプション] イメージ名[:タグ名] [引数]
$ docker run <イメージ名>


### オプション
--attach, -a 標準入力
--detach, -d バックグラウンド実行
--name[コンテナ名] コンテナ名を設定する

########################################
# コンテナを立ち上げる
########################################
$ docker run [ネットワークオプション] イメージ名[:タグ名] [引数]

例：
$ dockdr run --name <コンテナ名> -d -p <ホスト側のポート番号>:<コンテナ側のポート番号> <イメージ名>

例：
$ docker run -d -p 8080:80 nginx
$ docker run --name test-nginx -d -p 8080:80 nginx
$ localhost:8080でnginxのデフォルトページを確認できる

# -v は<ホスト側のディレクトリ>:<コンテナ側のマウントポイント>:<オプション>
$ docker run --name some-nginx -v /some/content:/usr/share/nginx/html:ro -d nginx

# 絶対パスで指定
docker run --name some-nginx -v /Users/takeshi/some/html:/usr/share/nginx/html:ro -d nginx

### オプション
-d バックグラウンド実行
-p ポートを指定
-it コンソールに結果を出力
--name コンテナ名を指定
--add-host ホスト名とIPをしてい


# ホストマシンのファイルをコンテナ内にコピーする場合
$ docker cp <ホスト上のコピー死体ファイルのパス> <コンテナ名 or ID>:<コピー先のパス>

# コンテナ内のファイルをホストマシンにコピーする場合
$ docker cp <コンテナ名 or ID>:<コンテナ上のコピーしたいファイルのパス> <コピー先のパス>

########################################
# コンテナ停止
########################################

$ docker stop [オプション] コンテナ識別子 [コンテナ識別子]


########################################
# コンテナ削除
########################################

$ docker rm [オプション] コンテナ識別子 [コンテナ識別子]

### オプション
-f, --force 強制削除
-v, --volumes 割り当てたボリュームを削除する



##################################################
#
# Dockerfile
#
##################################################

# ベースイメージの指定
FROM [イメージ名]
FROM [イメージ名]:[タグ名]

例：
FROM centos:centos7

タグ名省略時はlatest


########################################
# DockerfileからDockerイメージの作成
########################################

$ docker build -t [生成するイメージ名]:[タグ名] [Dockerfileの場所]


########################################
# コマンドの実行（RUN命令）
########################################

RUN [実行したいコマンド]

1. Shell形式での記述
# Nginxのインストール
RUN apt-get install -y nginx

2. Exec形式での記述
# Nginxのインストール
RUN ["/bin/bash","-c","apt-get install -y nginx"]


########################################
# デーモンの実行（CMD命令）
########################################

CMD [実行したいコマンド]

1. Shell形式での記述
CMD nginx -g 'daemon off;'

2. Exec形式での記述
CMD ["nginx", "-g", "deamon off;"]



########################################
# 環境変数の設定（ENV命令）
########################################

1. key value型で指定する場合
ENV [key] [value]

2. key=valueで指定する場合（1度に複数の値をセットする場合はこちらを使う）
ENV [key]=[value]

ENV value1=value1 \
    value2=value2


########################################
# 作業ディレクトリの指定（WORKDIR命令）
########################################

WORKDIR [作業ディレクトリのパス]

WORKDIR命令は、Dockerfileに書かれた次の命令を実行するための作業用ディレクトリを指定します。

- RUN命令
- CMD命令
- ENTRYPOINT命令
- COPY命令
- ADD命令

指定したディレクトリがない場合は新規作成。WORKDIRはDockerfile内で複数回使用することが可能。


########################################
# ユーザーの指定（USER命令）
########################################

以下の命令を実行する場合はユーザーを指定する
- RUN命令
- CMD命令
- ENTRYPOINT命令

USER [ユーザー名/UID]


USER命令で指定するユーザーは、あらかじめRUN命令で作成する必要がある


########################################
# ポートの設定（EXPOSE命令）
########################################

EXPOSE <ポート番号>

EXPOSE命令は、Dockerに実行中のコンテナがlisten（コンテナからホストへ公開）しているネットワークポートを知らせます。

またdocker container runコマンドの-pオプションをしようするときに、どのポートをホストへ公開するかを定義します。


例：
EXPOSE 8080


########################################
# ファイルのコピー（COPY命令）
########################################

COPY <ホストのファイルパス> <Dockerイメージのファイルパス>
COPY ["<ホストのファイルパス>" "<Dockerイメージのファイルパス>"]


########################################
# ボリュームのマウント（VOLUME命令）
########################################

イメージにボリュームを割り当てるときは、VOLUME命令を使います。

VOLUME ["/マウントポイント"]

設定できる値は、VOLUME ["/var/log/"]のようなJSON配列、もしくはVOLUME /var/logやVOLUME /var/log /var/dbのような複数の引数の文字を指定できます。

コンテナは永続データを保持するのに適していません。そのため、永続化が必要なデータはコンテナ外のストレージに保存するのが良いでしょう。



########################################
# Docker Composeの概要
########################################

Docker Composeは、複数のコンテナをまとめて管理するためのツール。

Docker Composeは、「docker-compose.yml」というファイルにコンテナの構成情報を定義することで、同一のホスト上の複数のコンテナを一括管理できます。

Composeの定義ファイルは、Webアプリケーションの依存関係（データベース、Webサーバ、アプリケーションなど）をまとめて設定できます。この定義ファイルをもとにdocker-composeコマンドを実行すると複数のコンテナをまとめて起動したり停止したりできます。


########################################
# docker-compose.ymlの概要
########################################

YAML形式。

Compose定義ファイルには、複数のコンテナの設定内容をまとめて１つのファイルに記述します。このCompose定義ファイルには管理したいコンテナのサービス（services:）/ネットワーク（networks:）/ボリューム（volumes:）を定義します。

以下docker-compose.ymlの記述例

----------------------------------------
# バージョンを指定
version: '3'

# サービス定義
services:
  webserver:
    image: ubuntu
    ports:
      - "80:80"
    networks:
      - webnet

  redis:
    image: redis
    networks:
      - webnet

# ネットワーク定義
networks:
  webnet:

# データボリューム定義
volumes:
  data-volume:
----------------------------------------



########################################
########################################
