
参考：https://dotinstall.com/lessons/basic_git
参考：https://qiita.com/devzip8/items/28ac253ea295ad6c2b73

##############################
Git
##############################

	##############################
	初期化：ローカルリポジトリを作成する
	##############################

	$ git init

	# 必要であれば.gitignoreを作成し、バージョン管理しないファイルやディレクトリを記載（例：*.log）
	$ vim .gitignore

	# プロジェクトディレクトリ内にあるファイルやディレクトリを全てステージング環境に移す
	# . は全てを意味する。もしくはファイル名を直接指定してもOK（index.htmlなど）

	$ git add .


	##############################
	コミット
	##############################

	# Initial Commitは適当なコメントに改変可能
	$ git commit -m "Initial Commit"


	# 先ほど作成したGitHubリポジトリのURLをコピー&ペーストして、リモートブランチとして設定
	$ git remote add origin https://github.com/your-name/project-name.git


	# ローカルのファイルをプッシュ
	# -u オプションを指定しておくと次回からgit push のみでアップロード可能
	git push -u origin master


	# リモートのファイルをローカルにclone（ダウンロード）する
	$ git pull リモート名 master

	参考：https://git-scm.com/book/ja/v1/Git-%E3%81%AE%E5%9F%BA%E6%9C%AC-Git-%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%81%AE%E5%8F%96%E5%BE%97


	# リポジトリの状態を調べる
	$ git status


	# 変更内容の把握
	$ git diff


	#----------------------
	コミットの上書き（後からコメント修正する時などに使用）
	#----------------------

	# エディタが立ち上がるので新しくコメント入力
	git commit --amend


	#----------------------
	コミットの打ち消し（履歴が残る）
	#----------------------

	git revert コミットのハッシュ値


	##############################
	ブランチ関係
	##############################

	# ブランチを作成する
	$ git branch <ブランチ名>

	# ブランチを表示する
	$ git branch

	# ブランチを表示する（リモートリポジトリーも表示する）
	$ git branch -a

	# ブランチを切り替える
	$ git checkout <既存ブランチ名>

	# ブランチを新規作成して切り替える
	$ git checkout -b <新ブランチ名>

	# 変更をマージする
	$ git merge <ブランチ名>
	$ git merge <リモート名/ブランチ名>

		例： 
		$ git merge origin/master

		上記のコマンドを打つと作業中のブランチに変更履歴をマージ（統合）することができます。

	# 現在作業中のブランチ名を変更する
	$ git branch -m <ブランチ名>
	$ git branch -m new_branch


		#----------------------
		ブランチの削除
		#----------------------

		# ブランチを削除する削除
		$ git branch -d <ブランチ名>
		$ git branch -d old_branch

		masterにマージされていない変更がある場合は警告を出して削除できない。
		強制的に削除したい場合は以下のコマンドを使う

		# ブランチを矯正削除する削除
		git branch -D <ブランチ名>
		git branch -D old_branch

	#########################
	diff（差分）
	#########################

	# git add する前に変更点を見る
	git diff

	# git add した後に変更点を見る
	git diff --cached

	# 今回コミットした変更点を見る
	git diff HEAD^


	#########################
	push
	#########################

	git push origin リモートリポジトリのブランチ名


	#########################
	ログ
	#########################

	# ログを確認する（複数行で表示）
	# git log

	# ログを確認する（１行で表示）
	$ git log --oneline --decorate


	#########################
	コミットログを表示（show）
	#########################

	# 最新のコミットログを表示する
	git show

	「git show ハッシュ値」や「git show タグ」で、コミットログから表示対象を指定できます。

	git show ハッシュ値
	（指定したハッシュ値を持つコミットのログを表示する）

	git show タグ
	（指定したタグが付いたコミットのログを表示する）


	#########################
	リモートリポジトリを確認する
	#########################

	git remote -v


	#########################
	プルリクエスト（bitbucket)
	#########################

	1.プッシュ
	2.プルリクエスト
	3.右上（プルリクエストを作成）
	4.左側に自分が作成したブランチを指定
	5.右側に合流先のブランチを指定
	6.タイトル・説明を書く
	7.レビュー担当者を設定
	8.プルリクエストを作成を押下
	9.マージ
	10.masterブランチに移動
	11.git pull
	12.git branch -d 作業ブランチでブランチを削除



	#########################
	リセット
	#########################
	参考：https://qiita.com/shuntaro_tamura/items/db1aef9cf9d78db50ffe

	reset --hard：全部Yに戻す。
	reset --mixed：commitとaddの取り消し。
	reset --soft：commitのみ取り消し。


		##-----------------------
		コミット後の変更を全部消す
		##-----------------------

		git reset --hard HEAD^


			最後の^の数だけ戻す
			例） git reset --hard HEAD^^^（３つ戻す）

			~(数字)で指定することもできる
			例） git reset --hard HEAD~5 （5つ戻す）


		##-----------------------
		直前のコミットを取り消す（コミットのみ取り消し）
		##-----------------------

		git reset --soft HEAD^


		##-----------------------
		addのみを取り消す
		##-----------------------

		git reset --mixed HEAD

		以下のようにも書くことができる
		
		git reset HEAD


		##-----------------------
		すごい昔の状態で動作を確認する
		##-----------------------

		# 以下のいずれかのコマンドを叩く（上推奨らしい）
		git checkout 昔のコミットのハッシュ値
		git reset --hard 昔のコミットのハッシュ値


		##-----------------------
		最新の状態に戻る
		##-----------------------

		git reset --hard ORIG_HEAD


		##-----------------------
		まちがえてresetした場合
		##-----------------------

		git reset --hard ORIG_HEAD


	#########################
	ローカルの変更内容を一時的に退避させる。
	#########################

	git stash

	# 復活させるには以下のコマンド
	git stash pop
	git stash apply

	違いはpopだと退避リストから消える
	applyだと退避リストに残ったまま
	

		##-----------------------
		コメント付きで一時保存
		##-----------------------
	
		git stash save コメント

		
		##-----------------------
		退避させた変更の一覧表示。
		##-----------------------

		git stash list


		##-----------------------
		退避リストから変更を削除する。
		##-----------------------

		git stash drop

		git stash applyと同じく、最新の変更が削除される。
		最新以前のものを削除する場合はgit stash drop 2みたいな感じで。


		##-----------------------
		退避リストを全部削除する。
		##-----------------------

		git stash clear

####################
fetchとmerge
####################

# mergeを使う方法
git fetch origin
git merge origin/develop
git push origin

# fetchとmergeは以下１コマンドで代替可能
git pull develop

# rebaseを使う方法
git fetch origin
git rebase origin/develop develop
git push origin -f


####################
同ブランチで共同作業する時の方法
####################

# リモート追跡ブランチを更新する
git fetch

# リモート追跡ブランチを表示する
git branch -r
git branch -r | grep tr1616

# リモート追跡ブランチをマージする
git checkout tr1616
git merge origin/tr1616
